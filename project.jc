import jandcode.commons.*
import jandcode.jc.*
import jandcode.jc.std.*

class P extends ProjectScript {

    void onInclude() {
        //
        project.name = "jandcode-core2"

        // version
        if (UtFile.exists(wd("__dev__"))) {
            // режим разработчика, так версия получается чуточку быстрее
            project.version = include(HgVersion).version("SNAPSHOT-#{revno}")
        } else {
            project.version = include(HgVersion).version("#{ver}")
        }
        //
        include(RootProject).with {
            groupId = "com.jandcode"
            modules(
                    "p-commons",
                    "p-jc",
                    "p-core",
                    "p-modules",
                    "p-db",
                    "p-web",
                    "p-jsa",
                    "p-mdoc",
                    "p-apex",
            )
        }
        //
        include(ThisProductBuilder).with {
            destDir = "bin"
        }
        //
        cm.add("view-jc-libs", this.&cmViewJcLibs, "Показать список внешних библиотек для jc (для обновления файла jc-libs.txt)")
    }

    void cmViewJcLibs() {
        ListLib libs = ctx.getLibs("jandcode-jc", "prod,dev")
        List lst = []
        for (lib in libs) {
            if (lib.name.indexOf("jandcode") == -1) {
                lst.add(lib.name)
            }
        }
        lst.sort()
        println lst.join("\n")
    }

    static class ThisProductBuilder extends ProductBuilder {
        void onExec() {
            buildProject()

            // libs
            def cp = createLibCopier(true)
            cp.add(ctx.loadLibs(wd("lib")), false)
            List<Project> mods = []
            grabJavaProjects(this, mods)
            for (m in mods) {
                if (m.name.startsWith("test") || m.name.endsWith("tests")) {
                    continue
                }
                cp.add(m, false)
            }
            cp.copyTo("${destDir}/lib", true, true)

            //
            ant.copy(todir: destDir, overwrite: true, preservelastmodified: true) {
                fileset(dir: wd("data/distr"))
            }
            ant.copy(file: wd("jc.bat"), todir: destDir, overwrite: true, preservelastmodified: true)
            ant.copy(file: wd("jc-env.bat"), todir: destDir, overwrite: true, preservelastmodified: true)

            // формирование jc-run
            def libCore = ctx.getLib("jandcode-jc").sourceProject.include(JavaProject)
            def libCoreNames = UtCnv.toNameList(ctx.getLibs(libCore.depends.prod.names + [libCore.name]))

            // jc-run.bat
            File jcrunFile = new File(destDir + "/jc-run.bat")
            String jcrunFileText = UtFile.loadString(jcrunFile)
            String s1 = ""
            for (z in libCoreNames) {
                s1 += "set CP=%CP%;%JCLIBDIR%\\${z}.jar\n"
            }
            jcrunFileText = jcrunFileText.replace("rem CP", s1)
            UtFile.saveString(jcrunFileText, jcrunFile)

            //
            makeJcRootFile()
            makeVersionFile()
        }

        /**
         * В lst собирает список всех проектов, которые JavaModule,
         * начиная с root
         */
        void grabJavaProjects(Project root, List lst) {
            RootProject rp = root.getIncluded(RootProject)
            if (rp != null) {
                for (m in rp.modules) {
                    grabJavaProjects(m, lst)
                }
            }
            JavaProject jm = root.getIncluded(JavaProject)
            if (jm != null) {
                lst.add(root)
            }
        }

    }

}