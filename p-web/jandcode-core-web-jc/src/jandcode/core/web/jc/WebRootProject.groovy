package jandcode.core.web.jc

import jandcode.commons.*
import jandcode.commons.error.*
import jandcode.commons.simxml.*
import jandcode.core.jc.*
import jandcode.jc.*
import jandcode.jc.std.*

class WebRootProject extends ProjectScript {

    protected void onInclude() throws Exception {
        include(AppRunBat).with {
            addRunConfig("app-run serve", "serve -log -p 8080 -c /jc")
        }
        include(RootProject).with {
            depends.dev(
                    "jandcode.core.web.tst",
            )
        }
        include(GenWebXml)
        onEvent(AppProductBuilder.Event_Exec, this.&onAppProductBuild)
        //
        include(AppCfxBuilder).appendHandler(this.&updateAppCfx)
    }

    /**
     * Что будет исключено при сборке resource-webroot
     */
    List<String> resourceWebrootExcludes = [
            "**/_jc/**",
            "**/_jc",
            "**/_gen/**",
            "**/_gen",
            "**/temp/**",
            "**/temp",
            "**/*.iml",
            "**/*.ipr",
            "**/*.iws",
    ]

    protected List<ResourceWebrootPath> _resourceWebroots = []

    /**
     * Добавить путь, который будет запакован в web-resource-webroot.jar при
     * сборке дистрибутива.
     */
    ResourceWebrootPath addResourceWebroot(String path) {
        ResourceWebrootPath res = new ResourceWebrootPath(wd(path))
        _resourceWebroots.add(res)
        return res
    }

    /**
     * Добавить путь, который будет запакован в web-resource-webroot.jar при
     * сборке дистрибутива.
     */
    ResourceWebrootPath addResourceWebroot(String path, String virtualPath) {
        ResourceWebrootPath res = new ResourceWebrootPath(wd(path), virtualPath)
        _resourceWebroots.add(res)
        return res
    }

    /**
     * Все добавленные ресурсы
     */
    List<ResourceWebrootPath> getResourceWebroots() {
        return _resourceWebroots
    }

    /**
     * Собрать web-resource-webroot.jar и вернуть путь до собранного файла.
     * Возвращает null, если собирать нечего.
     */
    String buildResourceWebrootJar() {
        if (_resourceWebroots.size() == 0) {
            return null
        }

        String resourceRoot = "resource-webroot"
        String destFile = wd("temp/lib/web-resource-webroot.jar")
        log.info("build jar: ${destFile}")

        // собираем jar
        ant.jar(destfile: destFile) {
            for (en in this._resourceWebroots) {
                if (!UtFile.exists(en.realPath)) {
                    throw new XError("Not found resourceWebrootPath: ${en.realPath}")
                }
                String pfx = UtVDir.join(resourceRoot, en.virtualPath)
                zipfileset(dir: en.realPath, prefix: pfx) {
                    include(name: '**/*')
                    for (ex in resourceWebrootExcludes){
                        exclude(name: ex)
                    }
                    for (ex in en.excludes) {
                        exclude(name: ex)
                    }
                }
            }
        }

        return destFile
    }

    void onAppProductBuild(AppProductBuilder.Event_Exec ev) {
        AppProductBuilder builder = ev.builder

        include(GenWebXml).genWebXml("${ev.builder.destDir}/web.xml")

        // web-resouurce-webroot.jar
        String rwr = buildResourceWebrootJar()
        if (rwr != null) {
            //
            ant.copy(file: rwr, todir: "${builder.destDir}/lib")
        }
    }

    void updateAppCfx(SimXml x) {
        // монтируем все добавленные web-ресурсы 
        String pfx = "web-resource-webroot"
        SimXml x1 = x.findChild("x-if-not@jc-dev-auto-generate=${pfx}", true)
        x1.clearChilds()
        x1.addChild(SimXmlConsts.NODE_COMMENT).setText("GENERATED by ${this.getClass().getName()}")
        int cnt = 0
        for (en in getResourceWebroots()) {
            cnt++
            SimXml x2 = x1.findChild("web/mount@name=${pfx}-dev-${cnt}", true)
            x2.setValue("realPath", en.realPath)
            x2.setValue("virtualPath", en.virtualPath)
        }
    }
}
