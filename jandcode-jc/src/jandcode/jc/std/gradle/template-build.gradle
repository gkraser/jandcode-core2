/*

    Утилиты для формирования xml-файла с зависимостями

 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:+"
    }
}

plugins {
    id "java"
}

apply plugin: "com.github.ben-manes.versions"

task resolveDeps {
    doLast {
        DepScanner scanner = new DepScanner()
        scanner.scan(project.configurations.compile, dependencies)
        String s = scanner.saveToXml()
        ant.echo(message: s, file: 'deps.xml')
    }
}

//////

class Dep {
    String displayName
    String module
    String group
    String version
    List<String> depends = []
    List<String> jars = []
    List<String> srcs = []
}

class DepScanner {

    Map<String, Dep> allDeps = new LinkedHashMap<>()
    def cfg
    def dependencies

    void scan(cfg, dependencies) {
        this.cfg = cfg
        this.dependencies = dependencies
        Configuration configuration = cfg
        ResolutionResult resolutionResult = configuration.incoming.resolutionResult
        ResolvedComponentResult root = resolutionResult.root
        scan1(null, root.dependencies)
        resolveJars()
        resolveSrcs()
    }

    private void scan1(Dep forDep, Set<? extends DependencyResult> results) {
        for (DependencyResult result : results) {
            if (result instanceof ResolvedDependencyResult) {
                ResolvedComponentResult componentResult = result.selected
                ComponentIdentifier componentIdentifier = componentResult.id

                Dep dep = null
                if (componentIdentifier instanceof ModuleComponentIdentifier) {
                    ModuleComponentIdentifier modId = componentIdentifier
                    String displayName = componentIdentifier.displayName
                    dep = allDeps.get(displayName)
                    if (dep == null) {
                        dep = new Dep()
                        dep.displayName = displayName
                        allDeps.put(dep.displayName, dep)

                        dep.group = modId.group
                        dep.module = modId.module
                        dep.version = modId.version
                    }

                    if (forDep != null) {
                        forDep.depends.add(displayName)
                    }
                }

                scan1(dep, componentResult.dependencies)
            } else if (result instanceof UnresolvedDependencyResult) {
                ComponentSelector componentSelector = result.attempted
                println "(failed) - ${componentSelector.displayName}"
            }
        }
    }

    void resolveSrcs() {
        def componentIds = cfg.incoming.resolutionResult.allDependencies.collect {
            it.selected.id
        }
        ArtifactResolutionResult result = dependencies.createArtifactResolutionQuery()
                .forComponents(componentIds)
                .withArtifacts(JvmLibrary, SourcesArtifact)
                .execute()
        result.resolvedComponents.each { ComponentArtifactsResult component ->
            Set<ArtifactResult> artifacts

            artifacts = component.getArtifacts(SourcesArtifact)
            artifacts.each { ArtifactResult ar ->
                if (ar instanceof ResolvedArtifactResult) {
                    String displayName = ar.id.componentIdentifier.displayName
                    Dep dep = allDeps.get(displayName)
                    if (dep != null) {
                        dep.srcs.add(ar.file.toString())
                    }
                }
            }
        }

    }

    void resolveJars() {
        for (a in cfg.incoming.artifacts) {
            String displayName = a.id.componentIdentifier.displayName
            Dep dep = allDeps.get(displayName)
            if (dep != null && a.file != null) {
                dep.jars.add(a.file.toString())
            }
        }
    }

    String saveToXml() {
        def writer = new StringWriter()
        def xml = new groovy.xml.MarkupBuilder(writer)
        def lst = []
        lst.addAll(allDeps.values())
        lst.sort { a, b -> a.displayName <=> b.displayName }
        xml.root() {
            for (Dep dep : lst) {
                lib(
                        displayName: dep.displayName,
                        module: dep.module,
                        group: dep.group,
                        version: dep.version,
                        depends: dep.depends.join(','),
                        jars: dep.jars.join(','),
                        srcs: dep.srcs.join(','),
                )
            }
        }
        String s = writer.toString()
        writer.close()
        return s
    }

}




