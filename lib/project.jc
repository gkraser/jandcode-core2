import jandcode.commons.*
import jandcode.jc.*
import jandcode.jc.std.*
import jandcode.jc.std.gradle.*

class P extends ProjectScript {

    void onInclude() {
        project.name = "lib-builder"
        //
        download_ojdbc8()
        //
        include(GradleTools).with {
            publishDir = "../_jc/${project.name}"
            tempDir = "../temp/${project.name}"

            String jcLibsFile = wd('../jc-libs.txt')
            Set jcLibs = new HashSet(new File(jcLibsFile).readLines())

            // библиотеки, от которых зависит jc берем из места,
            // откуда они в classpath появились
            String newJarDir = wd("../_jc/_lib")
            filter { List<GradleLibDef> libs ->
                for (GradleLibDef lib : libs) {
                    if (jcLibs.contains(lib.name)) {
                        String newJar = UtFile.join(newJarDir, "${lib.name}.jar")
                        if (UtFile.exists(newJar)) {
                            lib.jar = newJar
                        } else {
                            log.warn("Не найдена библиотека ${lib.name} из зависимостей " +
                                    "jandcode-jc ${jcLibsFile} в каталоге ${newJarDir}")
                        }
                    }
                }
            }
        }

    }

    void download_ojdbc8() {
        String vers = "18.3.0.0"
        String url = "https://bitbucket.org/gkraser/jandcode-core2/downloads/com.oracle.jdbc-ojdbc8-${vers}.jar"
        String fn = "ojdbc8-${vers}.jar"
        //
        String dirDest = wd("_oracle")
        String dirCache = UtFile.join(UtFile.getTempdir(), ".jandcode-cache/jc-download-lib")
        String fnDest = "${dirDest}/${fn}"
        String fnCache = "${dirCache}/${fn}"
        String fnTemp = "${fnCache}.tmp"
        //
        try {
            if (UtFile.exists(fnDest)) {
                return
            }
            log.info("resolve: ${fnDest}...")
            if (UtFile.exists(fnCache)) {
                ant.copy(file: fnCache, tofile: fnDest)
                return
            }
            log.info("download: ${url}...")
            ut.cleanfile(fnTemp)
            ant.get(src: url,
                    dest: fnTemp,
                    verbose: true,
            )
            ant.copy(file: fnTemp, tofile: fnCache, overwrite: true)
            ant.delete(file: fnTemp)
            ant.copy(file: fnCache, tofile: fnDest)
        } catch (e) {
            log.warn("Не удалось скачать [${url}] в [${fnDest}]. Предоставьте этот файл самостоятельно")
            throw e
        }
    }

}
